# -*- coding: utf-8 -*-
"""vit_api.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y7ryzPMl71ws_vXoh2BIM4TKwQDsHSZ-
"""

from fastapi import FastAPI, File, UploadFile
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import numpy as np
from io import BytesIO
from PIL import Image
import tensorflow as tf
import pandas as pd
from transformers import TFViTForImageClassification, ViTFeatureExtractor

app = FastAPI()

# CORS configuration
origins = [
    "http://localhost",
    "http://localhost:3000",
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# === Load ViT model and feature extractor ===
MODEL_PATH = "saved_vit_model"  # path to your ViT model directory
CSV_PATH = "skincare_recommendations_full.csv"

vit_model = TFViTForImageClassification.from_pretrained(MODEL_PATH)
feature_extractor = ViTFeatureExtractor.from_pretrained(MODEL_PATH)

# === Load CSV recommendation data ===
df = pd.read_csv(CSV_PATH)

# === Class categories ===
CATEGORIES = ['acne', 'Milia', 'Dry', 'Oily', 'Wrinkles', 'Non Wrinkles',
              'hyperpigmentation', 'Keratosis', 'Normal']
CRITICAL_CONDITIONS = ['acne', 'Milia', 'Keratosis', 'hyperpigmentation']

# === Utility Functions ===
def read_imagefile(file) -> Image.Image:
    image = Image.open(BytesIO(file)).convert("RGB")
    return image

def recommend_products(condition, top_k=3):
    condition = condition.lower()
    matches = df[df['condition'].str.lower() == condition]
    if matches.empty:
        return []
    return matches[['product', 'brand', 'skin_type', 'category']].head(top_k).to_dict(orient='records')

# === Test endpoint ===
@app.get("/ping")
async def ping():
    return {"message": "API is live!"}

# === Prediction endpoint ===
@app.post("/predict")
async def predict(file: UploadFile = File(...)):
    image = read_imagefile(await file.read()).resize((224, 224))
    inputs = feature_extractor(images=[np.array(image)], return_tensors='tf')

    logits = vit_model(**inputs).logits
    probs = tf.nn.softmax(logits, axis=1).numpy()[0]

    top_idx = np.argmax(probs)
    confidence = float(probs[top_idx])
    condition = CATEGORIES[top_idx]

    result = {
        "condition": condition,
        "confidence": confidence
    }

    # Confidence-based logic
    if confidence >= 0.99:
        result["recommendation_type"] = "products"
        result["recommendations"] = recommend_products(condition)
    elif confidence < 0.90 and condition.lower() in [c.lower() for c in CRITICAL_CONDITIONS]:
        result["recommendation_type"] = "refer"
        result["message"] = "Model is not confident and condition is critical. Please consult a dermatologist."
    else:
        result["recommendation_type"] = "cautious_products"
        result["message"] = "Model is moderately confident. Use recommended products with care."
        result["recommendations"] = recommend_products(condition)

    return result

# === Run server ===
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)

pip install fastapi

pip install uvicorn

from fastapi import FastAPI, File, UploadFile
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import numpy as np
from io import BytesIO
from PIL import Image
import tensorflow as tf
import pandas as pd
from transformers import TFViTForImageClassification, ViTFeatureExtractor

app = FastAPI()

# CORS configuration
origins = [
    "http://localhost",
    "http://localhost:3000",
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# === Load ViT model and feature extractor ===
MODEL_PATH = "/content/drive/MyDrive/saved_vit_model"  # path to your ViT model directory
CSV_PATH = "/content/drive/MyDrive/skincare_recommendations_full.csv"

vit_model = TFViTForImageClassification.from_pretrained(MODEL_PATH)
feature_extractor = ViTFeatureExtractor.from_pretrained(MODEL_PATH)

# === Load CSV recommendation data ===
df = pd.read_csv(CSV_PATH)

# === Class categories ===
CATEGORIES = ['acne', 'Milia', 'Dry', 'Oily', 'Wrinkles', 'Non Wrinkles',
              'hyperpigmentation', 'Keratosis', 'Normal']
CRITICAL_CONDITIONS = ['acne', 'Milia', 'Keratosis', 'hyperpigmentation']

pip install python-multipart

import nest_asyncio
import uvicorn

nest_asyncio.apply()

# === Utility Functions ===
def read_imagefile(file) -> Image.Image:
    image = Image.open(BytesIO(file)).convert("RGB")
    return image

def recommend_products(condition, top_k=3):
    condition = condition.lower()
    matches = df[df['condition'].str.lower() == condition]
    if matches.empty:
        return []
    return matches[['product', 'brand', 'skin_type', 'category']].head(top_k).to_dict(orient='records')

# === Test endpoint ===
@app.get("/ping")
async def ping():
    return {"message": "API is live!"}

# === Prediction endpoint ===
@app.post("/predict")
async def predict(file: UploadFile = File(...)):
    image = read_imagefile(await file.read()).resize((224, 224))
    inputs = feature_extractor(images=[np.array(image)], return_tensors='tf')

    logits = vit_model(**inputs).logits
    probs = tf.nn.softmax(logits, axis=1).numpy()[0]

    top_idx = np.argmax(probs)
    confidence = float(probs[top_idx])
    condition = CATEGORIES[top_idx]

    result = {
        "condition": condition,
        "confidence": confidence
    }

    # Confidence-based logic
    if confidence >= 0.99:
        result["recommendation_type"] = "products"
        result["recommendations"] = recommend_products(condition)
    elif confidence < 0.90 and condition.lower() in [c.lower() for c in CRITICAL_CONDITIONS]:
        result["recommendation_type"] = "refer"
        result["message"] = "Model is not confident and condition is critical. Please consult a dermatologist."
    else:
        result["recommendation_type"] = "cautious_products"
        result["message"] = "Model is moderately confident. Use recommended products with care."
        result["recommendations"] = recommend_products(condition)

    return result

# === Run server ===
#if __name__ == "__main__":
    #uvicorn.run(app, host="0.0.0.0", port=8000)

!pip install fastapi uvicorn nest-asyncio pyngrok python-multipart transformers tensorflow pillow pandas

!ngrok config add-authtoken 2vj15mq7lP8peG1Vbs4ev61ARMl_4vnMy8pxqyzu2F76E68WR

from pyngrok import ngrok
import nest_asyncio
import uvicorn

nest_asyncio.apply()

public_url = ngrok.connect(8000)
print(f"ðŸš€ Your FastAPI app is live at: {public_url}/docs")

uvicorn.run(app, host="0.0.0.0", port=8000)